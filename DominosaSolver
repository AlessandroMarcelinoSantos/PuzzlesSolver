$('#btCont').css("display", "none"); $('#Skyscraper').css("display", "none"); $('#MainContainer').css("position", "absolute");
Solver = (function () { //9985070
    const height = Game.task.length, width = Game.task[0].length, length = width * height;
    let Tiles = {
        t: new Map(),
        push: function (c1) {
            'rd'.split('').forEach((c, i) => {
                const c2 = c1[c];
                if (c2) {
                    const fl = c1.v === c2.v ? c1.I < c2.I : c1.v < c2.v,
                        I = fl ? c1 : c2, // mInor value cell
                        J = fl ? c2 : c1, // maJor value cell
                        d = fl ? c : 'lu'[i], // direction from maJor to mInor 
                        o = fl ? 'lu'[i] : c, // direction from mInor to maJor (d Opposite)
                        tile = { id: I.v + J.v, I: I, J: J, d: d, o: o, cells: [I, J] };
                    Tiles.t.get(tile.id).push(tile);
                    I.tilesMap.set(d, tile);
                    J.tilesMap.set(o, tile);
                    I.tiles.push(tile);
                    J.tiles.push(tile);
                }
            })
        },
        check: function (tiles) {
            if (tiles.length === 1)
                Tiles.pin(tiles[0]);
            else if (tiles.length === 2 || tiles.length === 3) {
                const cells = tiles.map(t => t.cells).flat();
                if (cells.filter(c => cells.filter(d => d === c).length > 1).length === tiles.length) {                             // if all tiles share a cell
                    Tiles.remove(cells.find(c => cells.filter(d => d === c).length > 1).tiles.filter(t => t.id !== tiles[0].id));   // remove all other tiles id's from shared cell
                }
                else if (tiles.length === 2 && [...new Set(cells)].length === 4) { // if there is only 2 tiles and them doesn't share a cell
                    cells.forEach(c => c.tiles.forEach((t, i, s) => !tiles.includes(t) && cells.includes(t.I) && cells.includes(t.J) && Tiles.remove([t])));   // check if there is a tile formed by 2 other cells on tiles, if so remove it
                    tiles[0].cells.forEach(c => c.tiles.forEach((t, i, s) => {
                        if (!tiles.includes(t) && Tiles.t.get(t.id).length === 2) {         // if there connection with another 2 length tile
                            const ost = Tiles.t.get(t.id).find(u => u !== t),               // get the other tile that is equivalent
                                osc = ost.cells.find(d => tiles[1].cells.includes(d));      // and try to get anOther Sharing Cell within the other pair
                            osc && [c, osc].forEach(sc => Tiles.remove(sc.tiles.filter(u => !tiles.concat([t, ost]).includes(u)))); // if so remove any other tiles
                        }
                    }));
                }
            }
        },
        remove: function (tiles) { tiles.forEach(tile => { Cells.remove(tile); Tiles.print(tile, 1); }) },
        print: function (tile, borders) {
            const fl = tile.I.i < tile.J.i,
                startPoint = fl ? tile.I.gameReference : tile.J.gameReference,
                endPoint = fl ? tile.J.gameReference : tile.I.gameReference;
            if (borders) {
                Math.abs(tile.I.i - tile.J.i) === 1 ? startPoint.status.borders.right = 1 : startPoint.status.borders.bottom = 1;
                startPoint.status.type = 'border';
            }
            else {
                Game.drawCellStatus(endPoint, endPoint.status);
                Game.setCellState(endPoint, endPoint.status);
            }
            Game.drawCellStatus(startPoint, startPoint.status);
            Game.setCellState(startPoint, startPoint.status);
            Game.currentState.lastMove = {
                cellStatus: startPoint.status,
                startPoint: startPoint,
                endPoint: endPoint,
                cells: [startPoint],
                direction: Math.abs(tile.I.i - tile.J.i) === 1 ? 'right' : 'down'
            };
            void Game.storeCurrentState();
        },
        pin: function (tile) {
            const status = (Math.abs(tile.I.i - tile.J.i) > 1) * 1 + (tile.I.i > tile.J.i) * 2 + 1;
            tile.I.gameReference.status.tile = status;
            tile.J.gameReference.status.tile = (status + 1) % 4 + 1;
            if (tile.I.i < tile.J.i)
                tile.I.gameReference.status.type = 'tile';
            else
                tile.J.gameReference.status.type = 'tile';
            Tiles.print(tile, 0);
            tile.cells.forEach(c => { c.tilesMap.forEach(t => Cells.remove(t)); c.tilesMap.clear() });
            Tiles.remove(Tiles.t.get(tile.id));
            Tiles.t.delete(tile.id);
        }
    };
    Array(height ** 2).fill().forEach((e, i) => {
        const f = (i / height) >> 0, l = i % height;
        if (f <= l)
            Tiles.t.set(('0' + f).slice(-2) + ('0' + l).slice(-2), []);
    });
    let Cells = {
        c: Array(length).fill().map(() => ({})),
        push: function (task, row, col) {
            const i = row * width + col, cell = Cells.c[i];
            Object.assign(cell, {
                i: i,
                v: ('0' + task).slice(-2),
                gameReference: {
                    row: row,
                    col: col,
                    status: { tile: 0, borders: { right: 0, bottom: 0 } }
                },
                r: col < width - 1 && Cells.c[i + 1],
                u: row > 0 && Cells.c[i - width],
                l: col > 0 && Cells.c[i - 1],
                d: row < height - 1 && Cells.c[i + width],
                tilesMap: new Map(),
                tiles: []
            });
        },
        remove: function (tile) {
            Tiles.t.has(tile.id) && Tiles.t.set(tile.id, Tiles.t.get(tile.id).filter(t => t !== tile));
            tile.cells.forEach((c, i) => { c.tilesMap.delete([tile.d, tile.o][i]); c.tiles = [...c.tilesMap.values()] })
        },
        check: function (cell) {
            if (cell.tiles.length > 0) {
                if (cell.tiles.length === 1)
                    Tiles.pin(cell.tiles[0])
                else {
                    const ids = [...new Set(cell.tiles.map(t => t.id))];
                    ids.length === 1 && Tiles.remove(Tiles.t.get(ids[0]).filter(t => !cell.tiles.includes(t)))
                }
            }
        }
    }
    Game.task.forEach((row, r) => row.forEach((task, c) => Cells.push(task, r, c)));
    Cells.c.forEach(cell => Tiles.push(cell));
    let Cluster = {
        check: function (cell) {
            if (!cell.gameReference.status.tile) {
                const ds = 'ruld'.split('').filter(d => cell.tilesMap.has(d)).join('');
                if (ds.length === 2 && 'rdld'.includes(ds)) // 'rd' or 'ld' start to check a cluster
                    Cluster.start(cell, ds)
            }
        },
        start: function (cell, ds) {
            let exits = [], // exits from cluster
                path = new Map(),
                f = ds[0] === 'r' ? 'r' : 'd', // following direction
                l = ds[0] === 'r' ? 'u' : 'r', // last (following) direction
                o,
                x = 0, // x start relative coordinate
                y = 0, // y start relative coordinate
                next = 1;
            function opp(d) { return 'ldru'['ruld'.indexOf(d)] } // return the opposite direction of d
            while (next && next !== cell && exits.length < 2) {
                next === 1 && (next = cell);
                if (next.tilesMap.has(l)) {                                                         //  If can move on the last direction
                    if (!next[l].tilesMap.has(f) || !next[f].tilesMap.has(l)) {                     //      If can't move to diagonal "last direction" + "following direction"
                        exits.push({ cell: next, ds: l });                                          //          Mark exit on last direction
                        if (!next.tilesMap.has(f))                                                  //          If can't move on following direction
                            o = opp(l), l = f, f = o                                                //              Turn to last direction's opposite
                        else if (!next[f].tilesMap.has(opp(l)) || !next[opp(l)].tilesMap.has(f))    //          Else if can't move on diagonal "last direction's opposite" + "following direction"
                            exits.push({})                                                          //              Mark a 2nd exit on same cell (break)
                    }
                    else if (!next.tilesMap.has(f))                                                 //      Else if can't move on following direction
                        exits.push({ cell: next, ds: l }), o = opp(l), l = f, f = o;                //          Mark exit on last direction and turn to last direction's opposite
                    else if (!next[f].tilesMap.has(opp(l)) || !next[opp(l)].tilesMap.has(f))        //      Else if can't move on diagonal "last direction's opposite" + "following direction"
                        exits.push({ cell: next, ds: f + l }), o = opp(l), l = f, f = o;            //          Mark exit on "following + last" directions and turn to last direction's opposite
                    else                                                                            //      Else
                        o = opp(f), f = l, l = o                                                    //           turn to last direction
                }
                else if (next.tilesMap.has(f)) {                                                    //  Else if can move on following direction
                    if (!next[f].tilesMap.has(opp(l)) || !next[opp(l)].tilesMap.has(f))             //      If can't move on diagonal "last direction's opposite" + "following direction"
                        exits.push({ cell: next, ds: f }), o = opp(l), l = f, f = o                 //          Mark exit on following direction and turn to last direction's opposite
                }
                else if (next.tilesMap.has(opp(l)))                                                 //  Else if can move on last direction opposite
                    o = opp(l), l = f, f = o                                                        //      Turn to last direction's opposite
                else
                    exits = [{}, {}];                                                               //  Dead end path
                next = next[f];
                [() => x++, () => y--, () => x--, () => y++]['ruld'.indexOf(f)]();
                !path.has(y) && path.set(y, []);
                path.get(y).push({ d: f, x: x })
            }
            if (next === cell && exits.length === 1) {
                path.forEach(p => p = p.sort((a, b) => a.x - b.x));
                let holes = [...path].map((p, i, s) => { // holes are cells that are between first and last cell of a cluster row but isn't part of the cluster
                    let ret = 0;
                    if (i < s.length - 1) {
                        let a = p, b = s[i + 1];
                        ret = a.d === "r" ? (b.d === "d" ? 0 : b.x - a.x - 1) : (a.d === "d" ? (b.d === "r" ? 0 : b.x - a.x - 1) : 0);
                    }
                    return ret;
                }).flat().reduce((a, b) => a + b);
                let diffs = [...path.values()].map(p => Math.max(...p.map(px => px.x)) - Math.min(...p.map(px => px.x)) + 1).reduce((a, b) => a + b);
                if ((diffs - holes) % 2 === 0)
                    exits[0].ds.split('').forEach(d => exits[0].cell.tilesMap.has(d) && Tiles.remove([exits[0].cell.tilesMap.get(d)]))
                else
                    'ruld'.split('').forEach(d => !exits[0].ds.includes(d) && exits[0].cell.tilesMap.has(d) && Tiles.remove([exits[0].cell.tilesMap.get(d)]))
            }
        }
    };
    let check = function () {
        Tiles.t.forEach(t => Tiles.check(t));
        Cells.c.forEach(c => Cells.check(c));
        Cells.c.forEach(c => Cluster.check(c));
    }
    for (let i = 0; i < width; i++) check();
    return { Tiles: Tiles, Cells: Cells, check: check }
})()